<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import './header.scss';
import { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';
import type { MenuProps } from 'antd';
import { Menu } from 'antd';
import React, { useState, useEffect } from 'react';
import { Translate<% if (enableTranslation) { %>, Storage<% } %> } from 'react-jhipster';
import LoadingBar from 'react-redux-loading-bar';
import entitiesMenuItems from 'app/entities/items';

<%_ if (enableTranslation && enableI18nRTL) { _%>
import { isRTL } from 'app/config/translation';
<%_ } _%>
import { Home, Brand } from './header-components';
import { adminMenu, EntitiesMenu, accountMenu<%_ if (enableTranslation) { _%>, LocaleMenu<%_ } _%>} from '../menus';
<%_ if (enableTranslation) { _%>
import { useAppDispatch } from 'app/config/store';
import { setLocale } from 'app/shared/reducers/locale';
<%_ } _%>

export interface IHeaderProps {
  isAuthenticated: boolean;
  isAdmin: boolean;
  ribbonEnv: string;
  isInProduction: boolean;
  isOpenAPIEnabled: boolean;
<%_ if (enableTranslation) { _%>
  currentLocale: string;
<%_ } _%>
}


const Header = (props: IHeaderProps) => {
  const [menuOpen, setMenuOpen] = useState(false);
  const [items, setItems] = useState<MenuProps['items']>([
  {
    label: (
      <Brand />
    ),
    key: 'brand',
  },
  {
    label: (
      <Home />
    ),
    key: 'home',
  },
  <%_ if (enableTranslation) { _%>
    {
      label: (
        <LocaleMenu currentLocale={props.currentLocale} />
      ),
      key: 'home',
    },
  <%_ } _%>
]);
<%_ if (enableI18nRTL) { _%>
  useEffect(() => document.querySelector('html').setAttribute('dir', isRTL(Storage.session.get('locale')) ? 'rtl' : 'ltr'));
<%_ } _%>

<%_ if (enableTranslation) { _%>
  const dispatch = useAppDispatch();

  const handleLocaleChange = event => {
    const langKey = event.target.value;
    Storage.session.set('locale', langKey);
    dispatch(setLocale(langKey));
  <%_ if (enableI18nRTL) { _%>
    document.querySelector('html').setAttribute('dir', isRTL(langKey) ? 'rtl' : 'ltr');
  <%_ } _%>
  }
<%_ } _%>

  const renderDevRibbon = () => props.isInProduction === false ? (
    <div className="ribbon dev">
      <a href="">
<%_ if (enableTranslation) { _%>
        <Translate contentKey={`global.ribbon.${props.ribbonEnv}`} />
<%_ } else { _%>
        Development
<%_ } _%>
      </a>
    </div>
  ) : null;

  const toggleMenu = () => setMenuOpen(!menuOpen);

  /* jhipster-needle-add-element-to-menu - JHipster will add new menu items here */

  useEffect(() => {
    if (props.isAuthenticated) {
      const newItems = [
        ...items,
        {
          label: 'Entities',
          key: 'entities',
          icon: <MailOutlined />,
          children: entitiesMenuItems(),
        },
        {
          label: 'Account',
          key: 'account',
          icon: <MailOutlined />,
          children: accountMenu(props.isAuthenticated),
        },
      ];

      setItems(newItems);
    }
  }, [props.isAuthenticated]);

  useEffect(() => {
    if (props.isAuthenticated && props.isAdmin) {
      const newItems = [
        ...items,
        {
          label: 'Admin',
          key: 'admin',
          icon: <MailOutlined />,
          children: adminMenu(props.isOpenAPIEnabled),
        },
      ];

      setItems(newItems);
    }
  }, [props.isAuthenticated, props.isAdmin, props.isOpenAPIEnabled]);

  return (
    <div id="app-header">
      {renderDevRibbon()}
      <LoadingBar className="loading-bar"/>
      <Menu mode="horizontal" items={items} />
    </div>
  );
};

export default Header;
